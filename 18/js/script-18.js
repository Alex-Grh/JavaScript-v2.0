/*
!String.prototype.split()
Сводка
Метод split() разбивает объект String на массив строк путём разделения строки указанной 
подстрокой.

Синтаксис
str.split([separator[, limit]])
Параметры
separator
Необязательный параметр. Указывает символы, используемые в качестве разделителя внутри 
строки. Параметр separator может быть как строкой, так и регулярным выражением. 
Если параметр опущен, возвращённый массив будет содержать один элемент со всей строкой. 
Если параметр равен пустой строке, строка str будет преобразована в массив символов.
limit
Необязательный параметр. Целое число, определяющее ограничение на количество найденных 
подстрок. Метод split() всё равно разделяет строку на каждом сопоставлении с разделителем 
separator, но обрезает возвращаемый массив так, чтобы он содержал не более limit элементов.
Описание
Метод split() возвращает новый массив.

Если разделитель separator найден, он удаляется из строки, а подстроки возвращаются 
в массиве. Если разделитель опущен, массив будет содержать только один элемент, состоящий 
из всей строки. Если разделитель является пустой строкой, строка str будет преобразована 
в массив символов.
*/
//! Метод split() применяется чтобы разбить строку и превратить в массив
// Строку можно разбить на массив с помощью метода split()

let a = 'hello, hi, mahai';
console.log(a);
console.log(a.split(',')); // это метод и необходимо указывать круглые скобки split()

let str = 'hello';
// let a01 = str.split(); // () без пробела и с пробелом (' ') вернет просто [hello]. Пререгнали строку в массив
let a01 = str.split(''); // добавим '' без пробела и получим ['h', 'e', 'l', 'l', 'o'] разбитие строки по элементам 
let a02 = str.split('',3); // Можно указать ('',3) количество выводимых элементов 3 первых ['h', 'e', 'l'] используется редко
console.log(a01);
console.log(a02);

let str02 = 'hello hi world test';
 let a03 = str02.split(' '); // может принимать нетолько пробел но и регулярное вырвжение ['hello', 'hi', 'world', 'test']
 console.log(a03);

 let str03 = 'hello, hi, world, test';
 let a04 = str03.split(','); // укажем в качестве разделителя (',') получаем ['hello', ' hi', ' world', ' test']
 console.log(a04); 


//!-----------------------------------------------------------------------------------
/*
!Array.prototype.join()
Сводка
Метод join() объединяет все элементы массива (или массивоподобного объекта) в строку.
Синтаксис
arr.join([separator])
Параметры
separator Необязательный
Определяет строку, разделяющую элементы массива. В случае необходимости тип разделителя 
приводится к типу Строка. Если он не задан, элементы массива разделяются запятой ','. 
Если разделитель - пустая строка, элементы массива ничем не разделяются в возвращаемой строке.
Возвращаемое значение
Строка, содержащая все элементы массива. Если arr.length == 0, то будет возвращена 
пустая строка.

Описание
Преобразует все элементы массива в строки и объединяет их в одну большую строку. 
Элемент массива с типом undefined или null преобразуется в пустую строку.
Примеры
Соединение массива четырьмя различными способами
В следующем примере создаётся массив a с тремя элементами, затем они четыре раза 
объединяются в строку: с использованием разделителя по умолчанию, запятой с пробелом, 
плюса, окружённого пробелами, и пустой строки.

var a = ['Ветер', 'Дождь', 'Огонь'];
var myVar1 = a.join();      // присвоит 'Ветер,Дождь,Огонь' переменной myVar1
var myVar2 = a.join(', ');  // присвоит 'Ветер, Дождь, Огонь' переменной myVar2
var myVar3 = a.join(' + '); // присвоит 'Ветер + Дождь + Огонь' переменной myVar3
var myVar4 = a.join('');    // присвоит 'ВетерДождьОгонь' переменной myVar4
*/

let b = [1, 2, 3];
console.log(b);
console.log(b.join('-'));

//!метод join() превращает массив в строку

let b02 = ['h', 'e', 'l', 'l', 'o'];
let c01 = b02.join() // если () получим h,e,l,l,o
let c02 = b02.join('') // если ('') получаем hello
let c03 = b02.join(' ') // если (' ') получаем h e l l o
let c04 = b02.join('-') // если ('-') получаем h-e-l-l-o
console.log(c01); 
console.log(c02); 
console.log(c03); 
console.log(c04); 


//!-----------------------------------------------------------------------------------
/*
!Array.prototype.forEach()
Интерактивный пример
Метод forEach() выполняет указанную функцию один раз для каждого элемента в массиве.

Синтаксис
arr.forEach(function callback(currentValue, index, array) {
    //your iterator
}[, thisArg]);
Параметры
callback
Функция, которая будет вызвана для каждого элемента массива. Она принимает от 
одного до трёх аргументов:
currentValue
Текущий обрабатываемый элемент в массиве.
indexНеобязательный
Индекс текущего обрабатываемого элемента в массиве.
arrayНеобязательный
Массив, по которому осуществляется проход.
thisArg
Необязательный параметр. Значение, используемое в качестве this при вызове 
функции callback.
Возвращаемое значение
undefined.

Описание
Метод forEach() выполняет функцию callback один раз для каждого элемента, 
находящегося в массиве в порядке возрастания. Она не будет вызвана для удалённых 
или пропущенных элементов массива. Однако, она будет вызвана для элементов, 
которые присутствуют в массиве и имеют значение undefined.

Функция callback будет вызвана с тремя аргументами:

значение элемента (value)
индекс элемента (index)
массив, по которому осуществляется проход (array)
Примеры
Нет операции для неинициализированных значений (разреженные массивы)
const arraySparse = [1,3,,7]
let numCallbackRuns = 0

arraySparse.forEach((element) => {
  console.log(element)
  numCallbackRuns++
})

console.log("numCallbackRuns: ", numCallbackRuns)

// 1
// 3
// 7
// numCallbackRuns: 3
// комментарий: как вы видите пропущенное значение между 3 и 7 не вызывало функцию callback.
*/
// forEach невозвращает нового массива как map и filter он просто применяет функцию а как располагаете данные уже решаем сами
// forEach дает возможность перебора массива и преминения к нему функции
// forEach неизменяет предыдущий массив а просто манипулирует им и преминяем его к нужным нам элементам
let b01 = [8, 9, 7];
b01.forEach(function (elem, index) {
   console.log(index); // выводим индекс массива
   console.log(elem * 2); // выводим элемент массива
   console.log('--');
});
console.log(b01);

//! метод forEach относится к функция высшего порядка которая в виде аргумента принимает другую функцию
//! всегда принимает colbek function функцию обратного вызова
//! после того как переберем массив с ним можно делать все что угодно
const array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
const newArray = [];
array.forEach(function (elem, index, arr) {  // принимает три параметра элемент, индекс и изначальный массив
   console.log(elem);
   newArray.push(elem += elem); // метод forEach применяет к каждому объекту функцию выполняет действие
   // return неработает вернуть результат получим undefined. Метод невозращает

});
console.log(newArray);

//! реальный пример применения forEach необходимо получить email

// есть список данных
const date = [
   {
      id: 1,
      name: 'Mario',
      age: 35,
      isActive: true,
      email: 'mario@gmail.com',
   },
   {
      id: 2,
      name: 'Ivan',
      age: 22,
      isActive: true,
      email: 'ivan@gmail.com',
   },
   {
      id: 3,
      name: 'Irina',
      age: 48,
      isActive: false,
      email: 'irina@gmail.com',
   },
   {
      id: 4,
      name: 'Egor',
      age: 26,
      isActive: true,
      email: 'egor@gmail.com',
   },
   {
      id: 5,
      name: 'Diana',
      age: 24,
      isActive: false,
      email: 'diana@gmail.com',
   },
]
  // создаем пустой массив
  const getEmail = [];
  const getUserName = [];
  // получим данные и переберем их
  date.forEach(function(elem) {
   getEmail.push(elem.email)
   getUserName.push(elem.name)
  });
  console.log(getEmail);
  console.log(getUserName);
  